{
  "language": "Solidity",
  "sources": {
    "contracts/TrueMile.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\npragma solidity ^0.8.9;\r\n\r\n \r\ncontract TrueMile {\r\n    struct Car {\r\n        string licensePlate;\r\n        address owner;\r\n        uint256 mileage;\r\n    }\r\n \r\n    mapping(string => Car) private carsByLicensePlate; //mappa che associa ad ogni targa un oggetto macchina\r\n    mapping(string => uint256[]) private mileageRecords; // mappa che associa ad ogni targa il suo registro di km registrati\r\n    mapping(string => address[]) private ownersByLicensePlate; //mappa che associa a una automobile la lista dei suioi proprietari nel tempo\r\n    mapping(address => Car[]) private carsByOwner; //mappa che associa ad un proprietario una lista di macchine possedute\r\n \r\n    function addCar(string memory licensePlate, uint256 mileage) public {\r\n        require(carsByLicensePlate[licensePlate].owner == address(0), \"Car already exists\");\r\n        Car memory newCar = Car(licensePlate, msg.sender, mileage);\r\n        carsByLicensePlate[licensePlate] = newCar;\r\n        mileageRecords[licensePlate].push(mileage);\r\n        ownersByLicensePlate[licensePlate].push(msg.sender);\r\n        carsByOwner[msg.sender].push(newCar);\r\n    }\r\n \r\n    function updateMileage(string memory licensePlate, uint256 mileage) public {\r\n        require(\r\n            carsByLicensePlate[licensePlate].owner == msg.sender,\r\n            \"You do not own this car\"\r\n        );\r\n        require(\r\n            mileage > carsByLicensePlate[licensePlate].mileage,\r\n            \"New mileage must be greater than current mileage\"\r\n        );\r\n        carsByLicensePlate[licensePlate].mileage = mileage;\r\n        mileageRecords[licensePlate].push(mileage);\r\n    }\r\n \r\n    function getCarByLicencePlate(\r\n        string memory licensePlate\r\n    ) public view returns (string memory, address, uint256) {\r\n        require(carsByLicensePlate[licensePlate].owner != address(0), \"Car not found\");\r\n        return (\r\n            carsByLicensePlate[licensePlate].licensePlate,\r\n            carsByLicensePlate[licensePlate].owner,\r\n            carsByLicensePlate[licensePlate].mileage\r\n        );\r\n    }\r\n \r\n    function getLatestMileage(\r\n        string memory licensePlate\r\n    ) public view returns (uint256) {\r\n        require(carsByLicensePlate[licensePlate].owner != address(0), \"Car not found\");\r\n        uint256[] memory records = mileageRecords[licensePlate];\r\n        if (records.length == 0) {\r\n            return carsByLicensePlate[licensePlate].mileage;\r\n        } else {\r\n            return records[records.length - 1];\r\n        }\r\n    }\r\n \r\n    function getMileageRecord(\r\n        string memory licensePlate\r\n    ) public view returns (uint256[] memory) {\r\n        require(carsByLicensePlate[licensePlate].owner != address(0), \"Car not found\");\r\n        return mileageRecords[licensePlate];\r\n    }\r\n \r\n    function changeOwner(string memory licensePlate, address newOwner) public {\r\n        require(carsByLicensePlate[licensePlate].owner != address(0), \"Car not found\");\r\n        carsByLicensePlate[licensePlate].owner = newOwner;\r\n        ownersByLicensePlate[licensePlate].push(newOwner);\r\n    }\r\n \r\n    function getOwners(\r\n        string memory licensePlate\r\n    ) public view returns (address[] memory) {\r\n        require(carsByLicensePlate[licensePlate].owner != address(0), \"Car not found\");\r\n        return ownersByLicensePlate[licensePlate];\r\n    }\r\n \r\n    function getCarsByOwner(address owner) public view returns (Car[] memory) {\r\n        return carsByOwner[owner];\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}