{
  "language": "Solidity",
  "sources": {
    "contracts/MileChain.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./Owned.sol\";\r\n\r\n/**\r\n * A contract for keeping track of mileage records for vehicles.\r\n * @title MileChain\r\n * @author Nicolas Guarini, Lorenzo Ficazzola\r\n */\r\ncontract MileChain is Owned {\r\n    /**\r\n     * @dev Define the Vehicle struct with licencePlate, owner and mileage\r\n     */\r\n    struct Vehicle {\r\n        string licensePlate;\r\n        address owner;\r\n        uint256 mileage;\r\n    }\r\n\r\n    /**\r\n     * @dev Define mappings to keep track of vehicles, their mileage records, and owners.\r\n     */\r\n    mapping(string => Vehicle) private vehicles;\r\n    mapping(string => uint256[]) private mileageRecords;\r\n    mapping(string => address[]) private ownersRecords;\r\n\r\n    /**\r\n     * Function to add a new vehicle\r\n     * @param licensePlate The licence plate of the vehicle\r\n     * @param mileage The initial mileage of the vehicle\r\n     */\r\n    function addVehicle(string memory licensePlate, uint256 mileage) public {\r\n        require(\r\n            vehicles[licensePlate].owner == address(0),\r\n            \"Vehicle already exists\"\r\n        );\r\n        require(\r\n            !safeMode,\r\n            \"Contract is in read-only mode for security reasons.\"\r\n        );\r\n        Vehicle memory newVehicle = Vehicle(licensePlate, msg.sender, mileage);\r\n        vehicles[licensePlate] = newVehicle;\r\n        mileageRecords[licensePlate].push(mileage);\r\n        ownersRecords[licensePlate].push(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Function to update the mileage of the vehicle\r\n     * @param licensePlate The licence plate of the vehicle\r\n     * @param mileage The new mileage of the vehicle\r\n     */\r\n    function updateMileage(string memory licensePlate, uint256 mileage) public {\r\n        require(\r\n            vehicles[licensePlate].owner == msg.sender,\r\n            \"You do not own this vehicle\"\r\n        );\r\n        require(\r\n            mileage > vehicles[licensePlate].mileage,\r\n            \"New mileage must be greater than current mileage\"\r\n        );\r\n        require(\r\n            !safeMode,\r\n            \"Contract is in read-only mode for security reasons.\"\r\n        );\r\n        vehicles[licensePlate].mileage = mileage;\r\n        mileageRecords[licensePlate].push(mileage);\r\n    }\r\n\r\n    /**\r\n     * Function to change the owner of a vehicle\r\n     * @param licensePlate The licence plate of the veichle\r\n     * @param newOwner The new owner of the vehicle\r\n     */\r\n    function changeOwner(string memory licensePlate, address newOwner) public {\r\n        require(\r\n            vehicles[licensePlate].owner != address(0),\r\n            \"Vehicle not found\"\r\n        );\r\n        require(\r\n            !safeMode,\r\n            \"Contract is in read-only mode for security reasons.\"\r\n        );\r\n        vehicles[licensePlate].owner = newOwner;\r\n        ownersRecords[licensePlate].push(newOwner);\r\n    }\r\n\r\n    /**\r\n     * Function to get the owner and the latest mileage of a vehicle\r\n     * @param licensePlate The licence plate of the vehicle\r\n     * @return The licence plate of the vehicle\r\n     * @return The owner's address of the vehicle\r\n     * @return The current mileage of the vehicle\r\n     */\r\n    function getVehicleByLicencePlate(\r\n        string memory licensePlate\r\n    ) public view returns (string memory, address, uint256) {\r\n        require(\r\n            vehicles[licensePlate].owner != address(0),\r\n            \"Vehicle not found\"\r\n        );\r\n        return (\r\n            vehicles[licensePlate].licensePlate,\r\n            vehicles[licensePlate].owner,\r\n            vehicles[licensePlate].mileage\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Function to get the mileage records of a vehicle\r\n     * @param licensePlate The licence plate of the vehicle\r\n     * @return The mileage records of a vehicle\r\n     */\r\n    function getMileageRecord(\r\n        string memory licensePlate\r\n    ) public view returns (uint256[] memory) {\r\n        require(\r\n            vehicles[licensePlate].owner != address(0),\r\n            \"Vehicle not found\"\r\n        );\r\n        return mileageRecords[licensePlate];\r\n    }\r\n\r\n    /**\r\n     * Function to get the owners records of a vehicle\r\n     * @param licensePlate The licence plate of the vehicle\r\n     * @return The owners records of the vehicle\r\n     */\r\n    function getOwnersRecords(\r\n        string memory licensePlate\r\n    ) public view returns (address[] memory) {\r\n        require(\r\n            vehicles[licensePlate].owner != address(0),\r\n            \"Vehicle not found\"\r\n        );\r\n        return ownersRecords[licensePlate];\r\n    }\r\n}\r\n"
    },
    "contracts/Owned.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * A contract to manage contract ownership and safe mode\r\n * @title Owned\r\n * @author Nicolas Guarini, Lorenzo Ficazzola\r\n */\r\ncontract Owned {\r\n    /**\r\n     * @dev Define variables to keep track of deployers and safe mode\r\n     */\r\n    address internal deployer; // TODO: implement managing a group of deployers\r\n    bool internal safeMode;\r\n\r\n    /**\r\n     * @dev Define modifier for giving permission only to the deployers of the contract\r\n     */\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the contract's variables\r\n     */\r\n    constructor() {\r\n        deployer = msg.sender;\r\n        safeMode = false;\r\n    }\r\n\r\n    /**\r\n     * Function to transfer contract ownership to another address\r\n     * @param newDeployer The new deployer of the contract\r\n     */\r\n    function transferDeployer(address newDeployer) public onlyDeployer {\r\n        deployer = newDeployer;\r\n    }\r\n\r\n    /**\r\n     * Function to change the state of the safe mode\r\n     * @param newState The new state of the safe mode\r\n     */\r\n    function setSafeMode(bool newState) public onlyDeployer {\r\n        safeMode = newState;\r\n    }\r\n\r\n    /**\r\n     * Function to get the deployer of the contract\r\n     * @return The address of the deployer of the contract\r\n     */\r\n    function getDeployer() public view onlyDeployer returns (address) {\r\n        return deployer;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}