{
  "language": "Solidity",
  "sources": {
    "contracts/MileChain.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity ^0.8.18;\n\nimport \"./Owned.sol\";\n\n/**\n * A contract for keeping track of mileage records for _vehicles.\n * @title MileChain\n * @author Nicolas Guarini, Lorenzo Ficazzola\n */\ncontract MileChain is Owned {\n    /**\n     * @dev Define the Vehicle struct with licencePlate, owner and mileage\n     */\n    struct Vehicle {\n        string licensePlate;\n        address owner;\n        uint256 mileage;\n    }\n\n    /**\n     * @dev Define the MileageRecord struct with mileage and unix timestamp.\n     */\n    struct MileageRecord {\n        uint256 mileage;\n        uint256 timestamp;\n    }\n\n    /**\n     * @dev Define the OwnersRecord struct with owner address and unix timestamp.\n     */\n    struct OwnersRecord {\n        address owner;\n        uint256 timestamp;\n    }\n\n    /**\n     * @dev Define mappings to keep track of vehicles, their mileage records, and owners.\n     */\n    mapping(string => Vehicle) private _vehicles;\n    mapping(string => MileageRecord[]) private _mileageRecords;\n    mapping(string => OwnersRecord[]) private _ownersRecords;\n\n    /**\n     * Default constructor, does nothing apart passing the parameter to Owned's constructor\n     * @param deployers Initial deployers array\n     */\n    constructor(address[] memory deployers) Owned(deployers) {}\n\n    /**\n     * Function to add a new vehicle\n     * @param licensePlate The licence plate of the vehicle\n     * @param mileage The initial mileage of the vehicle\n     */\n    function addVehicle(string memory licensePlate, uint256 mileage) public {\n        require(\n            _vehicles[licensePlate].owner == address(0),\n            \"Vehicle already exists\"\n        );\n        require(\n            !_safeMode,\n            \"Contract is in read-only mode for security reasons\"\n        );\n\n        _vehicles[licensePlate] = Vehicle(licensePlate, msg.sender, mileage);\n        _mileageRecords[licensePlate].push(\n            MileageRecord(mileage, block.timestamp)\n        );\n        _ownersRecords[licensePlate].push(\n            OwnersRecord(msg.sender, block.timestamp)\n        );\n    }\n\n    /**\n     * Function to update the mileage of the vehicle\n     * @param licensePlate The licence plate of the vehicle\n     * @param mileage The new mileage of the vehicle\n     */\n    function updateMileage(string memory licensePlate, uint256 mileage) public {\n        require(\n            _vehicles[licensePlate].owner == msg.sender,\n            \"You do not own this vehicle\"\n        );\n        require(\n            mileage > _vehicles[licensePlate].mileage,\n            \"New mileage must be greater than current mileage\"\n        );\n        require(\n            !_safeMode,\n            \"Contract is in read-only mode for security reasons\"\n        );\n\n        _vehicles[licensePlate].mileage = mileage;\n        _mileageRecords[licensePlate].push(\n            MileageRecord(mileage, block.timestamp)\n        );\n    }\n\n    /**\n     * Function to change the owner of a vehicle\n     * @param licensePlate The licence plate of the veichle\n     * @param newOwner The new owner of the vehicle\n     */\n    function changeOwner(string memory licensePlate, address newOwner) public {\n        require(\n            _vehicles[licensePlate].owner != address(0),\n            \"Vehicle not found\"\n        );\n        require(\n            _vehicles[licensePlate].owner == msg.sender,\n            \"You do not own this vehicle\"\n        );\n        require(\n            !_safeMode,\n            \"Contract is in read-only mode for security reasons\"\n        );\n\n        _vehicles[licensePlate].owner = newOwner;\n        _ownersRecords[licensePlate].push(\n            OwnersRecord(newOwner, block.timestamp)\n        );\n    }\n\n    /**\n     * Function to get the owner and the latest mileage of a vehicle\n     * @param licensePlate The licence plate of the vehicle\n     * @return The searched vehicle struct\n     */\n    function getVehicle(\n        string memory licensePlate\n    ) public view returns (Vehicle memory) {\n        require(\n            _vehicles[licensePlate].owner != address(0),\n            \"Vehicle not found\"\n        );\n\n        return _vehicles[licensePlate];\n    }\n\n    /**\n     * Function to get the mileage records of a vehicle\n     * @param licensePlate The licence plate of the vehicle\n     * @return The mileage records of a vehicle\n     */\n    function getMileageRecords(\n        string memory licensePlate\n    ) public view returns (MileageRecord[] memory) {\n        require(\n            _vehicles[licensePlate].owner != address(0),\n            \"Vehicle not found\"\n        );\n\n        return _mileageRecords[licensePlate];\n    }\n\n    /**\n     * Function to get the owners records of a vehicle\n     * @param licensePlate The licence plate of the vehicle\n     * @return The owners records of the vehicle\n     */\n    function getOwnersRecords(\n        string memory licensePlate\n    ) public view returns (OwnersRecord[] memory) {\n        require(\n            _vehicles[licensePlate].owner != address(0),\n            \"Vehicle not found\"\n        );\n\n        return _ownersRecords[licensePlate];\n    }\n}\n"
    },
    "contracts/Owned.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity ^0.8.18;\n\n/**\n * A contract to manage contract ownership and safe mode\n * @title Owned\n * @author Nicolas Guarini, Lorenzo Ficazzola\n */\ncontract Owned {\n    /**\n     * @dev Define variables to keep track of deployers and safe mode\n     */\n    mapping(address => bool) internal _deployers;\n    bool internal _safeMode;\n\n    /**\n     * @dev Define modifier to grant access only to deployers\n     */\n    modifier onlyDeployers() {\n        require(_deployers[msg.sender], \"You have to be a deployer to do this\");\n\n        _;\n    }\n\n    /**\n     * Initialize contract variables\n     * @param deployers Initial deployers array\n     */\n    constructor(address[] memory deployers) {\n        _deployers[msg.sender] = true;\n\n        for (uint i = 0; i < deployers.length; i++) {\n            _deployers[deployers[i]] = true;\n        }\n\n        _safeMode = false;\n    }\n\n    /**\n     * Function to change the state of the safe mode\n     * @param newState The new state of the safe mode\n     */\n    function setSafeMode(bool newState) public onlyDeployers {\n        _safeMode = newState;\n    }\n\n    /**\n     * Function to add a new deployer to the deployers mapping\n     * @param newDeployer The new deployer's address\n     */\n    function addDeployer(address newDeployer) public onlyDeployers {\n        require(\n            !_deployers[newDeployer],\n            \"The specified address is already a deployer\"\n        );\n\n        _deployers[newDeployer] = true;\n    }\n\n    /**\n     * Function to remove a deployer from the deployers mapping\n     * @param deployer The deployer's address which needs to be removed\n     */\n    function deleteDeployer(address deployer) public onlyDeployers {\n        require(\n            _deployers[deployer],\n            \"The specified address is not a deployer\"\n        );\n\n        _deployers[deployer] = false;\n    }\n\n    /**\n     * Function to check if a given address is in the deployers mapping\n     * @param deployer The deployer's address which needs to be checked\n     * @return A boolean result\n     */\n    function isDeployer(address deployer) public view returns (bool) {\n        return _deployers[deployer];\n    }\n\n    /**\n     * Function to check the current state of the contract\n     * @return The current safe mode state\n     */\n    function getCurrentSafeModeState() public view returns (bool) {\n        return _safeMode;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}